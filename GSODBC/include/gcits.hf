#ifndef GCITS_HF
#define GCITS_HF TRUE
/*=========================================================================
 * Copyright (C) GemTalk Systems 1986-2016.  All Rights Reserved.
 *
 * Name - gcits.hf
 *
 *  This file defines the entry points for the thread-safe GCI 
 *
 * $Id: gci.hf 31532 2013-09-25 19:41:53Z otisa $
 *
 *========================================================================
 */
#include "flag.ht"

#include "gcicmn.ht"

// Functions for loading a GCI library
#include "gcirtl.hf"

// A pointer of type GciSession denotes a session .
typedef void* GciSession;

extern "C" {

EXTERN_GCI_DEC(char*) GciTsEncrypt(const char* password, char *outBuf, size_t outBuffSize);
/* Encrypts the clear text 'password'. Puts the encrypted form in
   outBuff and returns a pointer to the first character.
   Returns NULL if outBuff is not large enough.
 */

EXTERN_GCI_DEC(GciSession) GciTsLogin(
    const char *StoneName,
    const char *HostUserId, 
    const char *HostPassword, BoolType hostPwIsEncrypted,
    const char *GemServiceNrs,
    const char *gemstoneUsername, const char *gemstonePassword,
    unsigned int loginFlags /* per GCI_LOGIN* in gci.ht */ ,
    int haltOnErrNum, GciErrSType *err);
/* GciTsLogin creates a new session.  
   A netldi is contacted per the NRS GemService, and optionally using
   HostUserId, HostPassword  to fork a gem process.
   Then the gem logs into the repository using StoneName, gemstoneUsername, 
   gemstonePassword .
   Returns NULL if an error occurred, with details in *err .  
   If result is non-NULL, login succeeded but there may still be a warning in *err .
   GCI_LOGIN_IS_SUBORDINATE bit in loginFlags is not allowed .
   "gcilnkobj" value for GemService is not allowed .
   GCI_LOGIN_PW_ENCRYPTED bit in loginFlags applies to gemstonePassword argument.
   haltOnErrNum, if non zero, specifes a value for GEM_HALT_ON_ERROR config parameter.
   Use GciTsEncrypt to encrypt passwords prior to calling GciTsLogin.
   If GemServiceNrs is NULL, the default "!@localhost!gemnetobject" is used .
   If StoneName is NULL, the default "gs64stone" is used
   HostUserId may be NULL if gem process is to run using the userId of the
   netldi  process .
 */

EXTERN_GCI_DEC(BoolType) GciTsLogout(GciSession sess, GciErrSType *err);
    // if result is FALSE, an error was returned in *err

EXTERN_GCI_DEC(int) GciTsSessionIsRemote(GciSession sess);
     // Returns -1 if session is not valid, 0 for linked, 1 for rpc
     // Always returns 1 because Linked sessions not supported in current implementation.

EXTERN_GCI_DEC(int) GciTsGemTrace(GciSession sess, int enable, GciErrSType *err);
  // For use in debugging the implementation.
  // note that the printSendTrace() and printRecvTrace in linkgc.hc
  // may be sufficient in a slow build without needing GciGemTrace(1)
  // enable = 0 none, 1 commands, 2 commands+args , 3 even more
  // Function result is previous value of the tracing state.
  // Also enabled by    export GS_LGC_DEBUG=1   or
  // export GS_LGC_DEBUG=2 in enviroments of libgcirpc.so and of netldi .


EXTERN_GCI_DEC(OopType) GciTsResolveSymbol(GciSession sess, 
	const char* str, OopType symbolList, GciErrSType *err);
  // result OOP_ILLEGAL if an error was returned in *err

EXTERN_GCI_DEC(OopType) GciTsResolveSymbolObj(GciSession sess, 
		OopType str, OopType symbolList, GciErrSType *err);
  // result OOP_ILLEGAL if an error was returned in *err

EXTERN_GCI_DEC(int) GciTsGetFreeOops(GciSession sess, OopType *buf, int numOopsRequested, GciErrSType *err);
    // result is number of Oops in buf, or -1 if an error was return in *err .

EXTERN_GCI_DEC(BoolType) GciTsSaveObjs(GciSession sess, OopType *buf, int count, GciErrSType *err);
    // result TRUE if buf completely processed, FALSE if error returned in *err
    // since GciTs does not support user actions, this always adds the objects
    // to the PureExportSet .

EXTERN_GCI_DEC(BoolType) GciTsReleaseObjs(GciSession sess, OopType *buf, int count, GciErrSType *err);
    // result TRUE if buf completely processed, FALSE if error returned in *err
    // the inverse of GciTsSaveObjs

EXTERN_GCI_DEC(BoolType) GciTsReleaseAllObjs(GciSession sess, GciErrSType *err);


EXTERN_GCI_DEC(int64) GciTsFetchBytes(GciSession sess,
     OopType theObject, int64 startIndex, ByteType *dest, int64 numBytes,
     GciErrSType *err );
    // result -1 means an error was returned in *err, and *dest is undefined
    // numBytes must be >= 0


EXTERN_GCI_DEC(int64) GciTsFetchChars(GciSession sess,
         OopType theObject, int64 startIndex, char *cString, int64 maxSize,
         GciErrSType *err);
    /* Returns -1 if an error returned in *err , in which case
       strlen(cString) == 0 .
       maxSize must be >= 1; 
       The bytes fetched are stored in memory
       starting at cString.  At most maxSize - 1 bytes will be fetched from
       the object, and a \0 character will be stored in memory following
       the bytes fetched.  The function returns the number of bytes fetched,
       excluding the null terminator character, which is equvalent to strlen(cString) */

EXTERN_GCI_DEC(int64) GciTsFetchUtf8Bytes(GciSession sess,
     OopType aString, int64 startIndex, ByteType *dest, int64 numBytes,
     OopType *utf8String, GciErrSType *err );
   /* class of aString must be a identical to or a subclass of 
      String, MultiByteString or Utf8 .
     *dest will be filled with up to numBytes bytes of UTF-8 encoded Characters ,
     with the fetch starting from 1-based startIndex in aString .

     If aString is an instance of Utf8 , or a kind of String with
     all codePoints <= 127, *utf8String will be unchanged and behavior
     is the same as GciTsFetchBytes_ .  

     If aString is a kind of String or MultiByteString with codePoints
     above 127,  and startIndex == 1 then
     aString is sent encodeAsUTF8 and the result added to the export
     set and returned in *utf8String.
     Then bytes are fetched from *utf8String as for
     GciFetchBytes_ .  The caller should pass *utf8String to GciTsReleaseObjs
     after fetching all the bytes desired.

     Returns -1 if an error was returned in *err , otherwise
     returns the number of bytes stored starting at *dest .
     There is no terminator zero included in *dest .
     */

EXTERN_GCI_DEC(BoolType) GciTsStoreBytes(GciSession sess,
     OopType theObject, int64 startIndex, ByteType *theBytes, int64 numBytes,
     OopType ofClass, GciErrSType *err );
    /* Returns FALSE if an error returned in *err .
       ofClass specifies the class which theObject is an instance of .
       For an object with multiple bytes per character or digit,
       "theBytes" is assumed to be in client native byte order,
       and will be swizzled if needed on the server. Also, startIndex
       and numBytes must be aligned on character/digit boundaries. */


EXTERN_GCI_DEC(int) GciTsFetchOops(GciSession sess,
  OopType theObject, int64 startIndex, OopType *theOops, int numOops,
  GciErrSType *err);
  /* Returns -1 if an error returned in *err , otherwise returns the
     number of oops returned in *theOops , which will be <= numOops .
     startIndex must be >= 1 .
     numOops must be >= 0 . theOops must be non-NULL if numOops > 0. */
   

EXTERN_GCI_DEC(BoolType) GciTsStoreOops(GciSession sess,
    OopType theObject, int64 startIndex,
    const OopType *theOops, int numOops, GciErrSType *err, BoolType overlay = FALSE);
  

EXTERN_GCI_DEC(int) GciTsRemoveOopsFromNsc(GciSession sess, 
    OopType theNsc, const OopType *theOops,
    int numOops , GciErrSType *err);
/*  Returns -1 if an error returned in *err, 
    0 if any element of theOops was not present in theNsc, 
    1 if all elements of theOops were present in theNsc */

class GciTsObjInfo {
 public:
  OopType       objId;
  OopType       objClass;                  /* OOP of the class of the obj */
  int64         objSize;                /* obj's total size, in bytes or OOPs*/
  int           namedSize;              /* num of named inst vars in the obj */
  unsigned short objectSecurityPolicyId;  // previously named segmentId
  unsigned short _bits;
  unsigned short access;  /* 0 no auth, 1 read allowed, 2 write allowed */
  enum { 
     AUTH_NONE = 0, AUTH_READ = 1, AUTH_WRITE = 2 
  };
  enum {  // definitions of bits
      implem_mask    = GC_IMPLEMENTATION_MASK, // 0x03
      indexable_mask = GC_INDEXABLE_MASK,      // 0x04
      invariant_mask = GC_INVARIANT_MASK,      // 0x08
      partial_mask   = 0x10,
      overlay_mask   = 0x20,
      is_placeholder = 0x40 , // object is place holder for unsatisfied forward reference
      swiz_kind_mask = 0x300,
           swiz_kind_shift = 8
  };

  inline unsigned char isInvariant() { return _bits & invariant_mask; }
  inline unsigned char isIndexable() { return _bits & indexable_mask; }
  inline unsigned char isPartial()   { return _bits & partial_mask; }
  inline unsigned char isOverlayed() { return _bits & overlay_mask; }

  inline GciByteSwizEType byteSwizKind() const {
     return (GciByteSwizEType)((_bits & swiz_kind_mask) >> swiz_kind_shift) ;
  }

  inline unsigned char objImpl() {
    /* implementation format 0..3 , one of GC_FORMAT_OOP..GC_FORMAT_SPECIAL */
    return _bits & GC_IMPLEMENTATION_MASK;
  }
};

EXTERN_GCI_DEC(int64) GciTsFetchObjInfo(GciSession sess, OopType objId, 
	BoolType addToExportSet, GciTsObjInfo *result, 
	ByteType *buffer, size_t bufSize, GciErrSType *err);
  // Function result is >= 0 if *result filled in,
  //   -1 if an error was returned in *err .
  // client side handling of special objects as before.
  // addToExportSet has effect only if function result is 1
  // if buffer not NULL, then up to bufSize bytes of the body of the object
  // are returned in *buffer, and function result is the number of instVars returned
  // If read authorization is denied for objId, then result->access == 0 ,
  // the rest of *result other than result->objId is zero , and function result is zero.

EXTERN_GCI_DEC(int64) GciTsFetchSize(GciSession sess, OopType obj, GciErrSType *err);
// Returns number of named plus varying instVars of obj .

EXTERN_GCI_DEC(int64) GciTsFetchVaryingSize(GciSession sess, OopType obj, GciErrSType *err);
// Returns number of varying instVars of obj .

EXTERN_GCI_DEC(OopType) GciTsFetchClass(GciSession sess, OopType obj, GciErrSType *err);
  // returns OOP_ILLEGAL if an error occurs

EXTERN_GCI_DEC(BoolType) GciTsObjExists(GciSession sess, OopType obj);
  // returns FALSE if an error occurs

EXTERN_GCI_DEC(int) GciTsIsKindOf(GciSession sess, 
		OopType obj, OopType aClass, GciErrSType *err);
  // returns -1 if an error occurs, 0 for false result, 1 for true result
  // uses kindOf semantics including consideration of class histories

EXTERN_GCI_DEC(int) GciTsIsSubclassOf(GciSession sess, 
			OopType cls, OopType aClass, GciErrSType *err);
  // returns -1 if an error occurs, 0 for false result, 1 for true result
  // uses kindOf semantics including consideration of class histories

EXTERN_GCI_DEC(int) GciTsIsKindOfClass(GciSession sess, 
		OopType obj, OopType aClass, GciErrSType *err);
  // returns -1 if an error occurs, 0 for false result, 1 for true result
  // uses subClassOf semantics ignoring class histories

EXTERN_GCI_DEC(int) GciTsIsSubclassOfClass(GciSession sess, 
			OopType cls, OopType aClass, GciErrSType *err);
  // returns -1 if an error occurs, 0 for false result, 1 for true result
  // uses subClassOf semantics ignoring class histories

EXTERN_GCI_DEC(OopType) GciTsNewObj(GciSession sess, OopType aClass, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err .
     Creates an instance of aClass with varying size zero .
   */

EXTERN_GCI_DEC(OopType) GciTsNewByteArray(GciSession sess, 
		ByteType *body, size_t numBytes, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of ByteArray */

EXTERN_GCI_DEC(OopType) GciTsNewString_(GciSession sess, 
		const char *cString, size_t nBytes, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of String */

EXTERN_GCI_DEC(OopType) GciTsNewString(GciSession sess, 
		const char *cString, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of String */

EXTERN_GCI_DEC(OopType) GciTsNewSymbol(GciSession sess, 
		const char *cString, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of Symbol */

EXTERN_GCI_DEC(OopType) GciTsNewUnicodeString_(GciSession s,
                        const ushort* str, size_t numShorts, GciErrSType *err);
   /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of Unicode7, Unicode16, or Unicode32 .
     str must be legal UTF-16 encoded data . */

EXTERN_GCI_DEC(OopType) GciTsNewUnicodeString(GciSession sess, 
		const ushort* str, GciErrSType *err);
   /* Returns OOP_ILLEGAL if an error was returned in *err .
     result will be an instance of Unicode7, Unicode16, or Unicode32 .
     str must be legal UTF-16 encoded data.
     str is expected to be terminated by a codepoint of zero */

EXTERN_GCI_DEC(OopType) GciTsNewUtf8String(GciSession sess, 
		const char* utf8data, BoolType convertToUnicode,
                GciErrSType *err);
   /* Returns OOP_ILLEGAL if an error was returned in *err .
     utf8data must be legal UTF-8 data, terminated by a zero byte.
     If convertToUnicode==0, returns an instance of Utf8 .
     If convertToUnicode==1, returns an instance of
     Unicode7, Unicode16, or Unicode32 using the minimal
     character size required to represent utf8data.   
     If convertToUnicode==1 and utf8data is 7 bit ascii, 
     an instance of Unicode7 is returned */

EXTERN_GCI_DEC(OopType) GciTsNewUtf8String_(GciSession sess, 
		const char* utf8data, size_t nBytes, BoolType convertToUnicode,
                GciErrSType *err);
   /* Returns OOP_ILLEGAL if an error was returned in *err .
     utf8data must contain nBytes bytes of legal UTF-8 data.
     If convertToUnicode==0, returns an instance of Utf8 .
     If convertToUnicode==1, returns an instance of
     Unicode7, Unicode16, or Unicode32 using the minimal
     character size required to represent utf8data.   
     If convertToUnicode==1 and utf8data is 7 bit ascii, 
     an instance of Unicode7 is returned */

EXTERN_GCI_DEC(int64) GciTsFetchUnicode(GciSession sess,
     OopType obj, ushort *dest, int64 destSize, int64 *requiredSize,
     GciErrSType *err );
  /* class of obj must be a identical to or a subclass of 
     String, DoubleByteString, or Unicode32 or Utf8 .
     destSize is the size of the buffer *dest in shorts .
     *dest will be filled with UTF-16 encoded Characters .
     Returns -1 if an error was returned in *err ,
     otherwise returns the number of codeunits (number of ushorts)
     that were stored at *dest.
     Returns in *requiredSize the number of shorts required to hold 
     the complete result including a terminator short of zero .
     If *requiredSize is > destSize, then *dest contains an incomplete
     result not terminated with a zero short.
     */

EXTERN_GCI_DEC(int64) GciTsFetchUtf8(GciSession sess,
     OopType obj, ByteType *dest, int64 destSize, int64 *requiredSize,
     GciErrSType *err );
   /* class of obj must be a identical to or a subclass of 
      String, DoubleByteString, or Unicode32 or Utf8 .
     *dest will be filled with UTF-8 encoded Characters . 
     Returns -1 if an error was returned in *err , otherwise
     returns the number of bytes stored starting at *dest,
     excluding the zero terminator byte.
     Returns in *requiredSize the number of  bytes required
     to hold the complete result, including a terminator byte of zero.
     If *requiredSize is > destSize, then *dest contains an incomplete
     result not terminated with a zero byte.
     */

EXTERN_GCI_DEC(BoolType) GciTsClearStack(GciSession sess, OopType gsProcess, GciErrSType *err);
    // returns FALSE if an error was returned in *err

EXTERN_GCI_DEC(OopType) GciTsPerform(GciSession sess,
         OopType receiver,
         OopType aSymbol, const char* selectorStr,
         const OopType *args, int numArgs,
         int flags /* per GCI_PERFORM_FLAG* in gcicmn.ht */,
         ushort environmentId /* normally zero*/,  GciErrSType *err);
     /* returns OOP_ILLEGAL if an error was returned in *err .
        Either selector == OOP_ILLEGAL and selectorStr is used
        or else selectorStr == NULL and selector is used. */

EXTERN_GCI_DEC(OopType) GciTsExecute(GciSession sess,
            const char* sourceStr, OopType sourceOop,
            OopType contextObject, OopType symbolList,
         int flags /* per GCI_PERFORM_FLAG* in gcicmn.ht */,
         ushort environmentId /* normally zero*/,  GciErrSType *err);
 /* returns OOP_ILLEGAL if an error was returned in *err .
    If sourceStr is not NULL, it is used as the source string,
    and sourceOop specifies a class, typically OOP_CLASS_STRING or OOP_CLASS_Utf8,
    If sourceStr == NULL, then sourceOop is expected to be a kind of
    String, Unicode16, Unicode32, or Utf8 .
    If contextObj != OOP_ILLEGAL, source is compiled as if
    it were an instance method of the class of contextObj,
    otherwise compilation produces an anonymous method in which self == nil.
    If symbolList == OOP_NIL, use (System myUserProfile symbolList)
    to resolve literals in the compilation, otherwise use symbolList argument. */

EXTERN_GCI_DEC(OopType) GciTsExecute_(GciSession sess,
            const char* sourceStr, ssize_t sourceSize, OopType sourceOop,
            OopType contextObject, OopType symbolList,
         int flags /* per GCI_PERFORM_FLAG* in gcicmn.ht */,
         ushort environmentId /* normally zero*/,  GciErrSType *err);
  /* variant of GciTsExecute . 
     If sourceSize == -1, strlen(sourceStr) is used for the size of the source*/


EXTERN_GCI_DEC(ssize_t) GciTsExecuteFetchBytes(GciSession sess,
            const char* sourceStr, ssize_t sourceSize, OopType sourceOop,
            OopType contextObject, OopType symbolList,
         ByteType *result, ssize_t maxResultSize, GciErrSType *err);
 /* variant of GciTsExecute_ which assumes that the execution result is
    a byte format object, usually an instance of String or Utf8 .
   The body of the result object is fetched into *result,
   and function result is number of bytes returned, or -1 if an error
   was returned in *err .
   Execution is in environment 0 using GCI_PERFORM_FLAG_ENABLE_DEBUG.
 */

EXTERN_GCI_DEC(BoolType) GciTsClassRemoveAllMethods(GciSession sess, 
			OopType aClass, GciErrSType *err);

EXTERN_GCI_DEC(BoolType) GciTsProtectMethods(GciSession sess, BoolType mode, GciErrSType *err);

EXTERN_GCI_DEC(OopType) GciTsCompileMethod(GciSession sess,
     OopType source, OopType aClass, OopType category,
     OopType symbolList, OopType overrideSelector,
     int compileFlags, ushort environmentId, GciErrSType *err);
 // result is the object id of a GsNMethod if successful
 // result OOP_NIL, if a Warning was returned in *err
 // result OOP_ILLEGAL if an error was returned in *err

EXTERN_GCI_DEC(OopType) GciTsContinueWith(GciSession sess,
    OopType gsProcess, OopType replaceTopOfStack,
    GciErrSType *continueWithError,
    int flags,  /* same as GciPerformNoDebug flags, but single step has
                        no effect */
    GciErrSType *err);
 /* result is OOP_ILLEGAL if an error was returned in *err .
    If continueWithError is not NULL, continue execution by signalling this
    error and replaceTopOfStack must be OOP_ILLEGAL . In this case,
    top frame of stack must be AbstractException>>signal
    or   AbstractException >>_signalFromPrimitive .
    Within *continueWithError, if continueWithError->exceptionObj is not OOP_NIL
    it is used to replace self in the top frame,
    otherwise continueWithError->number is used to construct a kind of
    AbstractException to replace self in the top frame.
    Then execution is restarted at start of top frame's method.

    replaceTopOfStack == OOP_ILLEGAL means TopOfStack will not be changed
  */

// Step - use GciTsPerform to do a message send

// following 3 implemented in client library as message sends
EXTERN_GCI_DEC(BoolType) GciTsAbort(GciSession sess, GciErrSType *err);

EXTERN_GCI_DEC(BoolType) GciTsBegin(GciSession sess, GciErrSType *err);

EXTERN_GCI_DEC(BoolType) GciTsCommit(GciSession sess, GciErrSType *err);


EXTERN_GCI_DEC(int) GciTsStoreTravDoTravRefs(GciSession sess,
    const OopType *oopsNoLongerReplicated, int numNotReplicated,
    const OopType *oopsGcedOnClient, int numGced,
    GciStoreTravDoArgsSType *stdArgs, GciClampedTravArgsSType *ctArgs,
    GciErrSType *err);
    // result 0 = traversal completed, 1 = traversal buffer full, -1 error in *err

EXTERN_GCI_DEC(BoolType) GciTsStoreTrav(GciSession sess, 
	GciTravBufType *travBuff, int flag, GciErrSType *err);
    // result FALSE if error returned in *err

EXTERN_GCI_DEC(int) GciTsMoreTraversal(GciSession sess,
	GciTravBufType *travBuff, GciErrSType *err);
    // function result 1 if traversal completed,
    //    0 if data returned but traversal not complete,
    //    -1 if an error was returned in *err (in which case *travBuff undefined)

EXTERN_GCI_DEC(BoolType) GciTsOopIsSpecial(OopType oop);

EXTERN_GCI_DEC(OopType)  GciTsFetchSpecialClass(OopType oop);
  /* If oop is a legal special object,
     returns the object id of the class of oop, if oop is
     otherwise returns OOP_ILLEGAL.
     The class of a legal special object will be one of
     OOP_CLASS_SMALL_DOUBLE
     OOP_CLASS_SMALL_INTEGER
     OOP_CLASS_UNDEFINED_OBJECT
     OOP_CLASS_BOOLEAN
     OOP_CLASS_CHARACTER
     OOP_CLASS_JIS_CHARACTER
   */

EXTERN_GCI_DEC(int) GciTsOopToChar(OopType oop);
  /* if oop is a legal instance of Character 
     (i.e. if GciTsSpecialFetchClass(oop) == OOP_CLASS_CHARACTER)
     returns the code point of oop ,  otherwise returns -1 */

EXTERN_GCI_DEC(OopType) GciTsCharToOop(uint ch);
  /* if  ch <= 0x10ffff  returns the oop of the corresponding 
    instance of Character, otherwise returns OOP_ILLEGAL */

EXTERN_GCI_DEC(OopType) GciTsDoubleToSmallDouble(double aFloat);
  /*  If the the argument is representable as a SmallDouble , return the oop
     representing that value , otherwise return OOP_ILLEGAL */


EXTERN_GCI_DEC(OopType) GciTsDoubleToOop(GciSession sess, double aDouble, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error was returned in *err, otherwise
     returns the oop of a Float or SmallDouble representing aFloat.
     Will operate without a valid session if the result is a SmallDouble  */


EXTERN_GCI_DEC(BoolType) GciTsOopToDouble(GciSession sess, OopType oop,
	double *result, GciErrSType *err);
  /* Returns TRUE if oop is an instance of SmallDouble or Float 
     in which case the numeric value is returned in *result.
     Otherwise returns FALSE . */

EXTERN_GCI_DEC(OopType) GciI32ToOop(int arg);
  /* Returns an instance of SmallInteger representing the arg */
  
EXTERN_GCI_DEC(OopType) GciTsI64ToOop(GciSession sess, int64 arg, GciErrSType *err);
  /* Returns OOP_ILLEGAL if an error occurred while creating a LargeInteger result.
     otherwise returns an instance of SmallInteger or LargeInteger representing
     arg */

EXTERN_GCI_DEC(BoolType) GciTsOopToI64(GciSession sess, OopType oop, int64 *result, GciErrSType *err);
  /* If oop is a SmallInteger, or if oop is an instance of LargeInteger
     within the range of a 64bit signed integer , returns the C integer in *result,
     and returns a function result of TRUE.
     Otherwise returns FALSE and *result is undefined and an error is returne in *err.
   */

/* xxx
DbgEstablishToFile
DbgLogString
    Richard suggests a server side method to append to this Dbg file also
    entries are timestamped.
    GsFile gciLogClient:  goes to this file .
    Want server debug data to be able to be logged without logging every gci call.
    So either separate files, or levels of logging like
      lev 0  - no logging
      lev 1  -  server gciLogClient and DbgLogString only
      lev 2  -  each gci call also logs
*/

EXTERN_GCI_DEC(BoolType) GciTsBreak(GciSession sess, BoolType hard, GciErrSType *err);
    // sends hard or soft break, returns FALSE if an error returned in *err .

typedef enum { gciSigNone, gciSigAbort, gciSigCommittedObjs, gciSigFinishTrans, 
               gciSignalFromSession,
               gciSigLostOt, gciSigLostSession } GciEventType ;

EXTERN_GCI_DEC(int) GciTsWaitForEvent(GciSession sess, int latencyMs,
			GciEventType *evout, GciErrSType *err);
    /* To be called from a separate application thread, this call blocks
       until an event is available or the session is shutdown by a logout or
       fatal error, or until GciTsCancelWaitForEvent is called.
       events are gem-gem signal, sigAbort, sigLostot, loss of session
       function result 1 , *evout has details , 0 no signal present,
        -1 error is in *err .
       A possible error is that some other thread is already waiting in
       GciTsWaitForEvent for the specified session. 
       latencyMs defines how long this thread will sleep after the session 
       received data from the gem before it polls again for an event. */

EXTERN_GCI_DEC(BoolType) GciTsCancelWaitForEvent(GciSession sess, GciErrSType *err);
    /* If result is FALSE, an error was returned in *err
       To be called from a thread other than the one waiting in GciTsWaitForEvent.
       causes any call to GciTsWaitForEvent to return.
       Has no effect if no thread is waiting in GciTsWaitForEvent for the specified
       session. */

}  /* extern "C" */

#include "gcistring.hf"

#endif 
