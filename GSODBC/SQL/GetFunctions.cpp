#include "stdafx.h"

static const int supportedFunctions [] = {
	SQL_API_SQLALLOCCONNECT,
	SQL_API_SQLALLOCENV,
	SQL_API_SQLALLOCHANDLE,
	SQL_API_SQLALLOCHANDLESTD,
	SQL_API_SQLALLOCSTMT,
	SQL_API_SQLBINDCOL,
	SQL_API_SQLBINDPARAM,
	SQL_API_SQLBINDPARAMETER,
	SQL_API_SQLBROWSECONNECT,
	SQL_API_SQLBULKOPERATIONS,
	SQL_API_SQLCANCEL,
	SQL_API_SQLCLOSECURSOR,
	SQL_API_SQLCOLATTRIBUTE,
	SQL_API_SQLCOLUMNPRIVILEGES,
	SQL_API_SQLCOLUMNS,
	SQL_API_SQLCONNECT,
	SQL_API_SQLCOPYDESC,
	SQL_API_SQLDATASOURCES,
	SQL_API_SQLDESCRIBECOL,
	SQL_API_SQLDESCRIBEPARAM,
	SQL_API_SQLDISCONNECT,
	SQL_API_SQLDRIVERCONNECT,
	SQL_API_SQLDRIVERS,
	SQL_API_SQLENDTRAN,
	SQL_API_SQLERROR,
	SQL_API_SQLEXECDIRECT,
	SQL_API_SQLEXECUTE,
	SQL_API_SQLEXTENDEDFETCH,
	SQL_API_SQLFETCH,
	SQL_API_SQLFETCHSCROLL,
	SQL_API_SQLFREECONNECT,
	SQL_API_SQLFREEENV,
	SQL_API_SQLFREEHANDLE,
	SQL_API_SQLFREESTMT,
	SQL_API_SQLFOREIGNKEYS,
	SQL_API_SQLGETCONNECTATTR,
	SQL_API_SQLGETCONNECTOPTION,
	SQL_API_SQLGETCURSORNAME,
	SQL_API_SQLGETDATA,
	SQL_API_SQLGETDESCFIELD,
	SQL_API_SQLGETDESCREC,
	SQL_API_SQLGETDIAGFIELD,
	SQL_API_SQLGETDIAGREC,
	SQL_API_SQLGETENVATTR,
	SQL_API_SQLGETFUNCTIONS,
	SQL_API_SQLGETINFO,
	SQL_API_SQLGETSTMTATTR,
	SQL_API_SQLGETSTMTOPTION,
	SQL_API_SQLGETTYPEINFO,
	SQL_API_SQLMORERESULTS,
	SQL_API_SQLNATIVESQL,
	SQL_API_SQLNUMPARAMS,
	SQL_API_SQLNUMRESULTCOLS,
	SQL_API_SQLPARAMDATA,
	SQL_API_SQLPARAMOPTIONS,
	SQL_API_SQLPREPARE,
	SQL_API_SQLPRIMARYKEYS,
	SQL_API_SQLPROCEDURECOLUMNS,
	SQL_API_SQLPROCEDURES,
	SQL_API_SQLPUTDATA,
	SQL_API_SQLROWCOUNT,
	SQL_API_SQLSETCONNECTATTR,
	SQL_API_SQLSETCONNECTOPTION,
	SQL_API_SQLSETCURSORNAME,
	SQL_API_SQLSETDESCFIELD,
	SQL_API_SQLSETDESCREC,
	SQL_API_SQLSETENVATTR,
	SQL_API_SQLSETPARAM,
	SQL_API_SQLSETPOS,
	SQL_API_SQLSETSCROLLOPTIONS,
	SQL_API_SQLSETSTMTATTR,
	SQL_API_SQLSETSTMTOPTION,
	SQL_API_SQLSPECIALCOLUMNS,
	SQL_API_SQLSTATISTICS,
	SQL_API_SQLTABLEPRIVILEGES,
	SQL_API_SQLTABLES,
	SQL_API_SQLTRANSACT,
};
static SQLUSMALLINT functionsArray [100];
static SQLSMALLINT  functionsBitmap [SQL_API_ODBC3_ALL_FUNCTIONS_SIZE];

VOID InitSupportedFunctions()
{
	INT		i;

	for (i = 0; i < 100; ++i) {
		functionsArray[i] = SQL_FALSE;
	}
	for (i = 0; i < SQL_API_ODBC3_ALL_FUNCTIONS_SIZE; ++i) {
		functionsBitmap[i] = 0;
	}
	for (i = 0; i < sizeof (supportedFunctions) / sizeof (supportedFunctions [0]); ++i) {
		int fn = supportedFunctions [i];
		if (fn < 100) {
			functionsArray [fn] = SQL_TRUE;
		}
		if ((fn >> 4) < SQL_API_ODBC3_ALL_FUNCTIONS_SIZE) {
			functionsBitmap [fn >> 4] |= 1 << (fn & 0xf);
		}
	}
}
SQLRETURN  SQL_API SQLGetFunctions(
	SQLHDBC			ConnectionHandle,
	SQLUSMALLINT	FunctionId, 
	SQLUSMALLINT	*Supported)
{
	GS_DBC			hDBC = (GS_DBC) ConnectionHandle;
	switch (FunctionId)
	{
		case SQL_API_ODBC3_ALL_FUNCTIONS:
			WriteToLog("SQLGetFunctions(0x%p, SQL_API_ODBC3_ALL_FUNCTIONS, 0x%p)", ConnectionHandle, Supported);
			memcpy (Supported, functionsBitmap, sizeof (functionsBitmap));
			break;
		case SQL_API_ALL_FUNCTIONS:
			WriteToLog("SQLGetFunctions(0x%p, SQL_API_ALL_FUNCTIONS, 0x%p)", ConnectionHandle, Supported);
			memcpy (Supported, functionsArray, sizeof (functionsArray));
			break;
		default:
			WriteToLog("SQLGetFunctions(0x%p, ???, 0x%p)", ConnectionHandle, Supported);
			*Supported = (SQL_FUNC_EXISTS (functionsBitmap, FunctionId)) ? SQL_TRUE : SQL_FALSE;
			break;
	}
	return Success(hDBC);
}
